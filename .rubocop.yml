# Base was copied from https://github.com/sider/meowcop/blob/master/config/rubocop.yml which is what Sider uses by default
AllCops:
  TargetRubyVersion: 2.3
  Exclude:
    - 'vendor/**/*'
    - 'db/schema.rb'
    - 'node_modules/**/*'
    - 'tmp/**/*'
    - 'lib/tasks/one_offs/**/*' # We don't really care about linting one-off tasks
    - 'app/migrators/**/*' # Migrators are one-off tasks so there isn't much need to lint them
  DisplayCopNames: true
  DisplayStyleGuide: true
  NewCops: enable

Gemspec/OrderedDependencies:
  Enabled: false
Lint/NonLocalExitFromIterator:
  Enabled: false # We actually believe that it is more readable with premature returns
Layout/BeginEndAlignment:
  Enabled: false # We believe it's more readable to have begin blocks aligned to the end blocks (and also helps with code smells)
Lint/AmbiguousRegexpLiteral:
  Enabled: false
Lint/AssignmentInCondition:
  Enabled: false
Metrics/AbcSize:
  Max: 60
# Use the default setting
Metrics/BlockLength:
  Max: 200
  Exclude:
    # RuboCop's default
    - 'Rakefile'
    - '**/*.rake'
    - 'spec/**/*.rb'
    # In many cases, config/routes.rb has very long block
    - 'config/routes.rb'
Metrics/ClassLength:
  Enabled: false
Metrics/CyclomaticComplexity:
  Max: 60
Metrics/MethodLength:
  Enabled: false
Metrics/ModuleLength:
  Enabled: false
Metrics/ParameterLists:
  Max: 5
Metrics/PerceivedComplexity:
  Enabled: false
Layout/ArgumentAlignment:
  Enabled: false
Layout/HashAlignment:
  Enabled: false
Layout/ParameterAlignment:
  Enabled: false
Layout/IndentationWidth:
  Enabled: false
Layout/FirstHashElementIndentation:
  Enabled: false
Layout/HeredocIndentation:
  Enabled: false
Layout/LineLength:
  Max: 200
  AllowedPatterns: ['^\s*#', '^\s*([a-zA-Z]*[lL]og[a-zA-Z]*)[ (]', '^\s*[''"]', '.*#.{30,300}', '^\s*[a-z_]:\s*".+",?[}\s]*$']
Layout/MultilineArrayBraceLayout:
  Enabled: false
Layout/MultilineAssignmentLayout:
  Enabled: false
Layout/MultilineBlockLayout:
  Enabled: false
Layout/MultilineHashBraceLayout:
  Enabled: false
Layout/MultilineMethodCallBraceLayout:
  Enabled: false
Layout/MultilineMethodCallIndentation:
  Enabled: false
Layout/MultilineMethodDefinitionBraceLayout:
  Enabled: false
Layout/MultilineOperationIndentation:
  Enabled: false
Layout/RescueEnsureAlignment:
  Enabled: false
Layout/SpaceAfterNot:
  Enabled: false
Layout/SpaceBeforeBlockBraces:
  Enabled: false
Layout/SpaceInLambdaLiteral:
  Enabled: false
Layout/SpaceInsideStringInterpolation:
  EnforcedStyle: space
Naming/PredicateName:
  Enabled: false # As of February 2022 we now want some methods to have is_ prefix so it is congruent with JavaScript
Naming/VariableNumber:
  Enabled: false
Style/AsciiComments:
  Enabled: false # It's 2022, emojis are everywhere
Style/Alias:
  EnforcedStyle: prefer_alias_method
Style/CaseLikeIf:
  Enabled: false
Style/CommentAnnotation:
  Enabled: false # Don't really care about being picky on comments like this. Not worth slowing down the developer.
Style/CommentedKeyword:
  Enabled: false # We want to allow comments on single-line method definitions like `# @alias`
Style/ConstantVisibility:
  Enabled: false
Style/Copyright:
  Enabled: false
Style/DisableCopsWithinSourceCodeDirective:
  Enabled: false # Allow disabling cops and we will use PRs to determine whether it should be enforced
Style/Documentation:
  Enabled: false # We will decide in PR whether public method should be documented or not.
Style/DocumentationMethod:
  Enabled: false # We will decide in PR whether public method should be documented or not.
Style/EmptyElse:
  AllowComments: true # When a comment is there then it means the programmer thought about the case so we can ignore it.
  EnforcedStyle: empty  # When a comment or nil is there it means the programmer thought about the case, so there is no need for concern
Style/FloatDivision:
  Enabled: false # Sometimes we're trying to force the number to become a float and it could be nil
Style/FrozenStringLiteralComment:
  Enabled: false
Style/GlobalVars:
  Enabled: false # If we're using global variables, we have a darn good reason or it should be blocked in the PR
Style/IfUnlessModifier:
  Enabled: false # This isn't always easier to read. Sometimes you want to put the IF in front of the block of code to make it more clear.
Style/ImplicitRuntimeError:
  Enabled: false # These are actually readable as long as we all know that they represent a RuntimeError
Style/InlineComment:
  Enabled: false # Trailing inline comments are pretty compact and more readable
Style/Lambda:
  Enabled: false
Style/LambdaCall:
  Enabled: false
Style/MethodCallWithArgsParentheses:
  Enabled: false
Style/MethodCallWithoutArgsParentheses:
  Enabled: true # We use whatever is more readable
Style/MethodCalledOnDoEndBlock:
  Enabled: false # Actually don't mind these - they look more readable
Style/MissingElse:
  Enabled: false # Sometimes it's obvious we don't care about the else case (e.g. if we're prematurely returning from method)
Style/MultilineBlockChain:
  Enabled: false # Sometimes these are more readable
Style/MutableConstant:
  Enabled: false
Style/MapToHash:
  Enabled: false # We believe it's more readable to use map vs hash with block syntax
Style/NumericPredicate:
  Enabled: false # .zero? and .positive? are a bit less readable than == 0 IMO
Style/OptionHash:
  Enabled: false # It is more intuitive to pass option hashes to other objects in many times
Style/OpenStructUse:
  Enabled: false
Style/RedundantRegexpCharacterClass:
  Enabled: false # No need to make regexp less readable than they already are by reducing redundancy
Style/RedundantRegexpEscape:
  Enabled: false # No need to make regexp less readable than they already are by reducing redundancy
Style/RedundantSelf:
  Enabled: false # Sometimes it's actually more readable to explicitly reference self
Style/RegexpLiteral:
  Enabled: false
Style/ReturnNil:
  Enabled: false # Returning nil is more clear what is happening and can prevent issues with returning mixed types
Style/Send:
  Enabled: false
Style/SingleLineMethods:
  Enabled: false # Sometimes these are more compact and easier to read. No need to spam our file with simple method definitions.
Style/StringLiterals:
  Enabled: false
Style/SymbolArray:
  Enabled: false
Style/TernaryParentheses:
  Enabled: false
Style/TrailingCommaInArrayLiteral:
  EnforcedStyleForMultiline: consistent_comma # It makes managing arrays much easier when we have commas at the end
Style/TrailingCommaInHashLiteral:
  EnforcedStyleForMultiline: consistent_comma # It makes managing hashes much easier when we have commas at the end
